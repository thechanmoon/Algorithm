(ns chapter-8.chapter-8-q2-test
  (:require [clojure.test :refer :all]
            [chapter-8.chapter-8-q2 :refer :all]))

(deftest robot-grid-path-test
  (testing "no off-limit cells"
    (let [grid-1 [[0]]
          grid-2 [[0 0]
                  [0 0]]
          grid-3 [[0 0 0]
                  [0 0 0]
                  [0 0 0]]
          grid-4 [[0 0 0]
                  [0 0 0]]
          grid-5 [[0 0 0]]]
      (is (= [] (robot-grid-path grid-1)))
      (is (= [[0 1] [1 1]] (robot-grid-path grid-2)))
      (is (= [[0 1] [0 2] [1 2] [2 2]] (robot-grid-path grid-3)))
      (is (= [[0 1] [1 1] [2 1]] (robot-grid-path grid-4)))
      (is (= [[1 0] [2 0]] (robot-grid-path grid-5)))
      ))

  (testing "no paths"
    (let [grid-1 [[1]]
          grid-2 [[1 1]
                  [1 1]]
          grid-3 [[1 1 1]
                  [1 1 1]
                  [1 1 1]]]
      (is (not (robot-grid-path grid-1)))
      (is (not (robot-grid-path grid-2)))
      (is (not (robot-grid-path grid-3)))))

  (testing "some off-limit cells"
    (let [grid-1 [[0 1]
                  [0 0]]
          grid-2 [[0 1 1]
                  [0 1 1]
                  [0 0 0]]
          grid-3 [[0 0 0]
                  [1 1 0]]
          grid-4 [[0 0 0]
                  [1 0 1]
                  [1 0 1]
                  [1 0 0]]
          grid-5 [[0 0 1]
                  [1 0 0]
                  [1 1 0]
                  [1 1 0]]
          grid-6 [[0 1 1 1 1]
                  [0 0 1 1 1]
                  [1 0 0 1 1]
                  [1 1 0 0 1]
                  [1 1 1 0 0]
                  [1 1 1 1 0]]
          grid-7 [[0 1 1 1 1]
                  [0 0 1 1 1]
                  [1 0 0 1 1]
                  [1 1 0 0 1]
                  [1 1 1 0 1]
                  [1 1 1 1 0]]]
      (is (= [[0 1] [1 1]] (robot-grid-path grid-1)))
      (is (= [[0 1] [0 2] [1 2] [2 2]] (robot-grid-path grid-2)))
      (is (= [[1 0] [2 0] [2 1]] (robot-grid-path grid-3)))
      (is (= [[1 0] [1 1] [1 2] [1 3] [2 3]] (robot-grid-path grid-4)))
      (is (= [[1 0] [1 1] [2 1] [2 2] [2 3]] (robot-grid-path grid-5)))
      (is (= [[0 1] [1 1] [1 2] [2 2] [2 3] [3 3] [3 4] [4 4] [4 5]] (robot-grid-path grid-6)))
      (is (not (robot-grid-path grid-7)))))

  (testing "large grid, with caching"
    (let [grid [[0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0]
                [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
                [0 1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0]
                [0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0]
                [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
                [0 1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0]
                [0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0]
                [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
                [0 1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0]
                [0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0]]]
      (time (robot-grid-path grid)))))